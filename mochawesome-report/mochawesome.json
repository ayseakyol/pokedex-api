{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 44,
    "pending": 0,
    "failures": 1,
    "start": "2020-05-28T10:53:29.626Z",
    "end": "2020-05-28T10:53:29.685Z",
    "duration": 59,
    "testsRegistered": 45,
    "passPercent": 97.77777777777777,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "028d9533-dbaf-4a26-955b-676f3923e660",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
          "title": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon: ",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/evolutions-of/spec.js",
          "file": "/logic/evolutions-of/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Squirtle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Squirtle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Squirtle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5bec01b6-ad34-4767-b607-6a946a61f42a",
              "parentUUID": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Wartortle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Wartortle",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Wartortle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9b2bd235-e6d2-4cda-9e00-f7eb34405f3d",
              "parentUUID": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Blastoise",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Blastoise",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Blastoise');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "c88222df-f072-4508-a1d3-9816c1d0ce4b",
              "parentUUID": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, DoesNotExist",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 3, DoesNotExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample3, 'DoesNotExist');\nconst expected = null;\nassert.strictEqual(actual, expected);",
              "err": {},
              "uuid": "f2821ff3-6d9b-464f-ac85-de47c8cc9740",
              "parentUUID": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Mew",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 5, Mew",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample5, 'Mew');\nconst expected = [\n  { \"name\": \"Mew\", \"num\": \"151\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "405a996a-7a3c-44d8-a409-86d12bb8f04d",
              "parentUUID": "0a8a97dd-cf68-46f3-a490-3f041dd1e4e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bec01b6-ad34-4767-b607-6a946a61f42a",
            "9b2bd235-e6d2-4cda-9e00-f7eb34405f3d",
            "c88222df-f072-4508-a1d3-9816c1d0ce4b",
            "f2821ff3-6d9b-464f-ac85-de47c8cc9740",
            "405a996a-7a3c-44d8-a409-86d12bb8f04d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
          "title": "findById(pokeData, id) : returns the pokemon object with the given id",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/id/spec.js",
          "file": "/logic/find-by/id/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 13",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 13",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 13);\nconst expected = {\n  \"id\": 13,\n  \"num\": \"013\",\n  \"name\": \"Weedle\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/013.png\",\n  \"type\": [\n    \"Bug\",\n    \"Poison\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"3.2 kg\",\n  \"candy\": \"Weedle Candy\",\n  \"candy_count\": 12,\n  \"egg\": \"2 km\",\n  \"spawn_chance\": 7.12,\n  \"avg_spawns\": 712,\n  \"spawn_time\": \"02:21\",\n  \"multipliers\": [\n    1.01,\n    1.09\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Flying\",\n    \"Psychic\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    { \"num\": \"014\", \"name\": \"Kakuna\" },\n    { \"num\": \"015\", \"name\": \"Beedrill\" }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "39df8281-d51c-4267-b9ec-2b3e752300fe",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, 16",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 16",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 16);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5977e632-1053-43f3-afec-66f0c1bdffd6",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 46",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 46",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 46);\nconst expected = {\n  \"id\": 46,\n  \"num\": \"046\",\n  \"name\": \"Paras\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/046.png\",\n  \"type\": [\n    \"Bug\",\n    \"Grass\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"5.4 kg\",\n  \"candy\": \"Paras Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 2.36,\n  \"avg_spawns\": 236,\n  \"spawn_time\": \"01:42\",\n  \"multipliers\": [\n    2.02\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Ice\",\n    \"Poison\",\n    \"Flying\",\n    \"Bug\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"047\",\n      \"name\": \"Parasect\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9671f005-b33b-4696-a523-50b8e2cff5cc",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 42",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 42",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 42);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "4cd55af9-9618-4eb5-9230-4a89e3bc7294",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 84",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 84",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 84);\nconst expected = {\n  \"id\": 84,\n  \"num\": \"084\",\n  \"name\": \"Doduo\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/084.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.40 m\",\n  \"weight\": \"39.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 0.52,\n  \"avg_spawns\": 52,\n  \"spawn_time\": \"05:10\",\n  \"multipliers\": [\n    2.19,\n    2.24\n  ],\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"085\",\n      \"name\": \"Dodrio\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "90d478ce-2341-49f5-b701-af0cc659e2fc",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 85",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 85",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 85);\nconst expected = {\n  \"id\": 85,\n  \"num\": \"085\",\n  \"name\": \"Dodrio\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/085.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.80 m\",\n  \"weight\": \"85.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"egg\": \"Not in Eggs\",\n  \"spawn_chance\": 0.22,\n  \"avg_spawns\": 22,\n  \"spawn_time\": \"02:12\",\n  \"multipliers\": null,\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"prev_evolution\": [\n    {\n      \"num\": \"084\",\n      \"name\": \"Doduo\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "97d0da21-992e-4093-beba-17f02b0c7e81",
              "parentUUID": "88f2717b-9368-4a6e-8765-69d3820a5e8d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39df8281-d51c-4267-b9ec-2b3e752300fe",
            "5977e632-1053-43f3-afec-66f0c1bdffd6",
            "9671f005-b33b-4696-a523-50b8e2cff5cc",
            "4cd55af9-9618-4eb5-9230-4a89e3bc7294",
            "90d478ce-2341-49f5-b701-af0cc659e2fc",
            "97d0da21-992e-4093-beba-17f02b0c7e81"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4f579aac-4ff1-44c0-8116-213770d1112b",
          "title": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/key-value/spec.js",
          "file": "/logic/find-by/key-value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, name, Weedle",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, name, Weedle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'name', 'Weedle');\nconst expected = [\n  { \"num\": \"013\", \"name\": \"Weedle\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "90633d0a-2499-4d74-bfee-84ddcbca4f51",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, id, 12",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, id, 12",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'id', \"12\");\nconst expected = [\n  { \"num\": \"012\", \"name\": \"Butterfree\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "584c819f-db3a-42c6-8c24-4fb62bfa2a02",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, doesNotExist, hi!",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, doesNotExist, hi!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'doesNotExist', 'hi!');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e9a666ab-c8a2-4143-bd5c-472fdb6ce2b6",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name, Mew",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, name, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'name', 'Mew');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "4c175afe-724c-44ac-a630-5a0c5e52d2a1",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, Not in Eggs",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, Not in Eggs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', 'Not in Eggs');\nconst expected = [\n  { \"num\": \"085\", \"name\": \"Dodrio\" },\n  { \"num\": \"087\", \"name\": \"Dewgong\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "85c683df-93fb-47b5-a47f-bdbe82844878",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, 5 km",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, 5 km",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', '5 km');\nconst expected = [\n  { \"num\": \"083\", \"name\": \"Farfetch'd\" },\n  { \"num\": \"084\", \"name\": \"Doduo\" },\n  { \"num\": \"086\", \"name\": \"Seel\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "edbadb9f-33ec-49c5-ab35-1246be2f7256",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, spawn_time, N/A",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 4, spawn_time, N/A",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample4, 'spawn_time', 'N/A');\nconst expected = [\n  { \"num\": \"132\", \"name\": \"Ditto\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "ba61e0a8-64c7-41bf-a17c-b30dc5e65519",
              "parentUUID": "4f579aac-4ff1-44c0-8116-213770d1112b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90633d0a-2499-4d74-bfee-84ddcbca4f51",
            "584c819f-db3a-42c6-8c24-4fb62bfa2a02",
            "e9a666ab-c8a2-4143-bd5c-472fdb6ce2b6",
            "4c175afe-724c-44ac-a630-5a0c5e52d2a1",
            "85c683df-93fb-47b5-a47f-bdbe82844878",
            "edbadb9f-33ec-49c5-ab35-1246be2f7256",
            "ba61e0a8-64c7-41bf-a17c-b30dc5e65519"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
          "title": "findByType(pokeData, type) : returns the name and number of all pokemon with this type",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/type/spec.js",
          "file": "/logic/find-by/type/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 1, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample1, 'Bug');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Metapod', num: '011' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' },\n  { name: 'Kakuna', num: '014' },\n  { name: 'Beedrill', num: '015' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a6a8d447-1f81-47ab-b26b-5fffb2420446",
              "parentUUID": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample2, 'Bug');\nconst expected = [\n  { name: 'Paras', num: '046' },\n  { name: 'Parasect', num: '047' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3d1cf28d-a271-4b23-b916-c48e776474d7",
              "parentUUID": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Water",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 3, Water",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample3, 'Water');\nconst expected = [\n  { name: 'Seel', num: '086' },\n  { name: 'Dewgong', num: '087' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7d057700-256c-4a93-a7ad-d8ee993067c1",
              "parentUUID": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample4, 'Normal');\nconst expected = [\n  { name: 'Tauros', num: '128' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "cdf00e14-3912-49d5-b1d1-db440d5d67e9",
              "parentUUID": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample5, 'Dragon');\nconst expected = [\n  { name: 'Dratini', num: '147' },\n  { name: 'Dragonair', num: '148' },\n  { name: 'Dragonite', num: '149' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "43f7f24e-c97c-4a6d-ae3f-542694fd3610",
              "parentUUID": "118ab108-f6d0-4e6e-bebc-89d7ccadfa23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6a8d447-1f81-47ab-b26b-5fffb2420446",
            "3d1cf28d-a271-4b23-b916-c48e776474d7",
            "7d057700-256c-4a93-a7ad-d8ee993067c1",
            "cdf00e14-3912-49d5-b1d1-db440d5d67e9",
            "43f7f24e-c97c-4a6d-ae3f-542694fd3610"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d2027c9-f7bd-492e-af7c-67af5e35c719",
          "title": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/value/spec.js",
          "file": "/logic/find-by/value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 12",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 1, 12",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample1, '12');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "18349829-7b12-4bfb-ac81-9a080a7059a2",
              "parentUUID": "5d2027c9-f7bd-492e-af7c-67af5e35c719",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample2, 'Bug');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "f39b6e28-5c10-4061-b00f-31afa878fccd",
              "parentUUID": "5d2027c9-f7bd-492e-af7c-67af5e35c719",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, None",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 4, None",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample4, 'None');\nconst expected = [\n  { name: 'Mr. Mime', num: '122' },\n  { name: 'Scyther', num: '123' },\n  { name: 'Jynx', num: '124' },\n  { name: 'Electabuzz', num: '125' },\n  { name: 'Magmar', num: '126' },\n  { name: 'Pinsir', num: '127' },\n  { name: 'Tauros', num: '128' },\n  { name: 'Lapras', num: '131' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "723ac808-2d9f-4b18-9872-1c41372bf362",
              "parentUUID": "5d2027c9-f7bd-492e-af7c-67af5e35c719",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, null",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 5, null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample5, \"null\");\nconst expected = [\n  { name: 'Moltres', num: '146' },\n  { name: 'Dragonite', num: '149' },\n  { name: 'Mewtwo', num: '150' },\n  { name: 'Mew', num: '151' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "bf1150ef-0fe0-4177-a0b0-70243c41bece",
              "parentUUID": "5d2027c9-f7bd-492e-af7c-67af5e35c719",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "18349829-7b12-4bfb-ac81-9a080a7059a2",
            "f39b6e28-5c10-4061-b00f-31afa878fccd",
            "723ac808-2d9f-4b18-9872-1c41372bf362",
            "bf1150ef-0fe0-4177-a0b0-70243c41bece"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
          "title": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/weakness/spec.js",
          "file": "/logic/find-by/weakness/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Electric",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 1, Electric",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample1, 'Electric');\nconst expected = [\n  {\n    name: 'Squirtle',\n    num: '007'\n  },\n  {\n    name: 'Wartortle',\n    num: '008'\n  },\n  {\n    name: 'Blastoise',\n    num: '009'\n  },\n  {\n    name: 'Butterfree',\n    num: '012'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "974a9d93-f9d6-48bf-a8db-5e30b06723f4",
              "parentUUID": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample2, 'Bug');\nconst expected = [\n  {\n    name: 'Paras',\n    num: '046'\n  },\n  {\n    name: 'Parasect',\n    num: '047'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "47111ca6-67de-4b0c-96ec-c014b656398c",
              "parentUUID": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Fighting",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 3, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample3, 'Fighting');\nconst expected = [\n  {\n    name: 'Dewgong',\n    num: '087'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a8ed429d-6455-4a69-b93a-8bffc0b432a7",
              "parentUUID": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample4, 'Normal');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "80dc9b72-6c49-4ac8-b1d4-b846965f6be4",
              "parentUUID": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample5, 'Dragon');\nconst expected = [\n  {\n    name: 'Dratini',\n    num: '147'\n  },\n  {\n    name: 'Dragonair',\n    num: '148'\n  },\n  {\n    name: 'Dragonite',\n    num: '149'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "b99c8ff0-d2eb-4ba0-99cf-4ce551044576",
              "parentUUID": "dda7d657-78d5-4df1-94a4-27e9c1448fd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "974a9d93-f9d6-48bf-a8db-5e30b06723f4",
            "47111ca6-67de-4b0c-96ec-c014b656398c",
            "a8ed429d-6455-4a69-b93a-8bffc0b432a7",
            "80dc9b72-6c49-4ac8-b1d4-b846965f6be4",
            "b99c8ff0-d2eb-4ba0-99cf-4ce551044576"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
          "title": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/type-stats/spec.js",
          "file": "/logic/type-stats/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, Grass",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Grass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Grass');\nconst expected = {\n  typeCount: 5,\n  typeName: 'Grass',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "10844efa-0ec0-4f98-a0aa-ee7048b68e47",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Fire",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Fire",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Fire');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fire',\n  weaknessCount: 5\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e8500663-3e32-4448-b527-e53df07580cc",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Normal');\nconst expected = {\n  typeCount: 2,\n  typeName: 'Normal',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "c7c46d4e-3bb9-497a-9024-704fa86b3dc0",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Fighting",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Fighting');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fighting',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "20bad01f-8b2f-4f59-b144-b1003a88409b",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Dragon');\nconst expected = {\n  typeCount: 3,\n  typeName: 'Dragon',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "636234d6-b4aa-45ab-b059-a4f2c97c89f1",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Fairy",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Fairy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Fairy');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fairy',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6b7921cb-6b0a-4626-9d13-a229a0d47ebe",
              "parentUUID": "83c567cf-48ab-43f3-ad4c-b63ea76f3173",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10844efa-0ec0-4f98-a0aa-ee7048b68e47",
            "e8500663-3e32-4448-b527-e53df07580cc",
            "c7c46d4e-3bb9-497a-9024-704fa86b3dc0",
            "20bad01f-8b2f-4f59-b144-b1003a88409b",
            "636234d6-b4aa-45ab-b059-a4f2c97c89f1",
            "6b7921cb-6b0a-4626-9d13-a229a0d47ebe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc1113fe-89b0-427a-8cef-0a1549d46244",
          "title": "valuesForKey(pokeData, key) : returns all unique values stored in that key",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/values-for-key/spec.js",
          "file": "/logic/values-for-key/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, id",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'id');\nconst expected = [43, 44, 45, 46, 47];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "f86ff6ed-2bde-4c8b-b37b-9c6da4544c6e",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'name');\nconst expected = [\n  'Oddish',\n  'Gloom',\n  'Vileplume',\n  'Paras',\n  'Parasect'\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "2696afdc-65ce-430b-a408-dbd131f2e2cc",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, num",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, num",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'num');\nconst expected = ['083', '084', '085', '086', '087'];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "801a326b-fc0c-403c-8666-f497c01cf25e",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, multipliers",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, multipliers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'multipliers');\nconst expected = [\n  null,\n  [2.19, 2.24],\n  [1.04, 1.96]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "76d1eacf-392e-4691-8207-535061957344",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, weaknesses",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, weaknesses",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'weaknesses');\nconst expected = [\n  ['Bug', 'Ghost', 'Dark'],\n  ['Fire', 'Electric', 'Ice', 'Flying', 'Rock'],\n  ['Fire', 'Bug', 'Rock', 'Ghost', 'Dark', 'Steel'],\n  ['Ground'],\n  ['Water', 'Ground', 'Rock'],\n  ['Fire', 'Flying', 'Rock'],\n  ['Fighting'],\n  ['Electric', 'Grass'],\n  ['Electric', 'Rock'],\n  ['Electric', 'Grass', 'Fighting', 'Rock']\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:60:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "     \"Grass\"\n     \"Fighting\"\n     \"Rock\"\n   ]\n-   [\n-     \"Fighting\"\n-   ]\n ]\n"
              },
              "uuid": "fba2842e-6999-47b9-bed0-52dd66974bbe",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, prev_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, prev_evolution",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'prev_evolution');\nconst expected = [\n  [\n    { num: '129', name: 'Magikarp' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "19063bb5-cba9-42b0-8fed-e02b94bfa1b7",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, next_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 5, next_evolution",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample5, 'next_evolution');\nconst expected = [\n  [\n    { num: '148', name: 'Dragonair' },\n    { num: '149', name: 'Dragonite' }\n  ],\n  [\n    { num: '149', name: 'Dragonite' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "be9668d5-31c5-47bb-9b3b-208a7a447c36",
              "parentUUID": "fc1113fe-89b0-427a-8cef-0a1549d46244",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f86ff6ed-2bde-4c8b-b37b-9c6da4544c6e",
            "2696afdc-65ce-430b-a408-dbd131f2e2cc",
            "801a326b-fc0c-403c-8666-f497c01cf25e",
            "76d1eacf-392e-4691-8207-535061957344",
            "19063bb5-cba9-42b0-8fed-e02b94bfa1b7",
            "be9668d5-31c5-47bb-9b3b-208a7a447c36"
          ],
          "failures": [
            "fba2842e-6999-47b9-bed0-52dd66974bbe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}