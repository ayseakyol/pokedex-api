{
  "stats": {
    "suites": 8,
    "tests": 45,
    "passes": 41,
    "pending": 0,
    "failures": 4,
    "start": "2020-05-28T08:16:36.496Z",
    "end": "2020-05-28T08:16:36.565Z",
    "duration": 69,
    "testsRegistered": 45,
    "passPercent": 91.11111111111111,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "13aa3f21-37ac-47db-a1c9-286a13b8f70c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9434a51e-e303-4784-8d13-88d8bf3ba160",
          "title": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon: ",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/evolutions-of/spec.js",
          "file": "/logic/evolutions-of/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Squirtle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Squirtle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Squirtle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "04f9bee1-cef2-42d2-bec5-6a2d7d7baef9",
              "parentUUID": "9434a51e-e303-4784-8d13-88d8bf3ba160",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Wartortle",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Wartortle",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Wartortle');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "94032435-465b-4280-b039-71b4804e80e7",
              "parentUUID": "9434a51e-e303-4784-8d13-88d8bf3ba160",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, Blastoise",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 1, Blastoise",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample1, 'Blastoise');\nconst expected = [\n  { \"num\": \"007\", \"name\": \"Squirtle\" },\n  { \"num\": \"008\", \"name\": \"Wartortle\" },\n  { \"num\": \"009\", \"name\": \"Blastoise\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "f18fc5ba-273a-433d-a7f5-a9c4873461ba",
              "parentUUID": "9434a51e-e303-4784-8d13-88d8bf3ba160",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, DoesNotExist",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 3, DoesNotExist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample3, 'DoesNotExist');\nconst expected = null;\nassert.strictEqual(actual, expected);",
              "err": {},
              "uuid": "f7f43d88-9c5d-4951-8d1e-a476135246f7",
              "parentUUID": "9434a51e-e303-4784-8d13-88d8bf3ba160",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Mew",
              "fullTitle": "evolutionOf(pokeData, name) : returns all evolutions of a pokemon:  data sample 5, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = evolutionOf(dataSample5, 'Mew');\nconst expected = [\n  { \"name\": \"Mew\", \"num\": \"151\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "555f9404-f3d1-405e-a3b5-8184793aab56",
              "parentUUID": "9434a51e-e303-4784-8d13-88d8bf3ba160",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04f9bee1-cef2-42d2-bec5-6a2d7d7baef9",
            "94032435-465b-4280-b039-71b4804e80e7",
            "f18fc5ba-273a-433d-a7f5-a9c4873461ba",
            "f7f43d88-9c5d-4951-8d1e-a476135246f7",
            "555f9404-f3d1-405e-a3b5-8184793aab56"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "04d05841-bf81-4b37-a5e8-0c558d08f038",
          "title": "findById(pokeData, id) : returns the pokemon object with the given id",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/id/spec.js",
          "file": "/logic/find-by/id/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 13",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 13",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 13);\nconst expected = {\n  \"id\": 13,\n  \"num\": \"013\",\n  \"name\": \"Weedle\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/013.png\",\n  \"type\": [\n    \"Bug\",\n    \"Poison\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"3.2 kg\",\n  \"candy\": \"Weedle Candy\",\n  \"candy_count\": 12,\n  \"egg\": \"2 km\",\n  \"spawn_chance\": 7.12,\n  \"avg_spawns\": 712,\n  \"spawn_time\": \"02:21\",\n  \"multipliers\": [\n    1.01,\n    1.09\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Flying\",\n    \"Psychic\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    { \"num\": \"014\", \"name\": \"Kakuna\" },\n    { \"num\": \"015\", \"name\": \"Beedrill\" }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "1d4b1079-0df4-48bb-932c-d3db2a8b7588",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, 16",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 1, 16",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample1, 16);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "d66e6cd9-9084-408f-9351-fc5878f28b45",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 46",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 46",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 46);\nconst expected = {\n  \"id\": 46,\n  \"num\": \"046\",\n  \"name\": \"Paras\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/046.png\",\n  \"type\": [\n    \"Bug\",\n    \"Grass\"\n  ],\n  \"height\": \"0.30 m\",\n  \"weight\": \"5.4 kg\",\n  \"candy\": \"Paras Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 2.36,\n  \"avg_spawns\": 236,\n  \"spawn_time\": \"01:42\",\n  \"multipliers\": [\n    2.02\n  ],\n  \"weaknesses\": [\n    \"Fire\",\n    \"Ice\",\n    \"Poison\",\n    \"Flying\",\n    \"Bug\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"047\",\n      \"name\": \"Parasect\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7345f4a7-cf4e-4f5b-8b0b-443c2c15289b",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, 42",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 2, 42",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample2, 42);\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "14c0d040-fcfe-4c9a-bd58-48ebdf05a942",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 84",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 84",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 84);\nconst expected = {\n  \"id\": 84,\n  \"num\": \"084\",\n  \"name\": \"Doduo\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/084.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.40 m\",\n  \"weight\": \"39.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"candy_count\": 50,\n  \"egg\": \"5 km\",\n  \"spawn_chance\": 0.52,\n  \"avg_spawns\": 52,\n  \"spawn_time\": \"05:10\",\n  \"multipliers\": [\n    2.19,\n    2.24\n  ],\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"next_evolution\": [\n    {\n      \"num\": \"085\",\n      \"name\": \"Dodrio\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5878b029-eb9b-4da5-a107-646905af401b",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, 85",
              "fullTitle": "findById(pokeData, id) : returns the pokemon object with the given id data sample 3, 85",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findById(dataSample3, 85);\nconst expected = {\n  \"id\": 85,\n  \"num\": \"085\",\n  \"name\": \"Dodrio\",\n  \"img\": \"http://www.serebii.net/pokemongo/pokemon/085.png\",\n  \"type\": [\n    \"Normal\",\n    \"Flying\"\n  ],\n  \"height\": \"1.80 m\",\n  \"weight\": \"85.2 kg\",\n  \"candy\": \"Doduo Candy\",\n  \"egg\": \"Not in Eggs\",\n  \"spawn_chance\": 0.22,\n  \"avg_spawns\": 22,\n  \"spawn_time\": \"02:12\",\n  \"multipliers\": null,\n  \"weaknesses\": [\n    \"Electric\",\n    \"Rock\"\n  ],\n  \"prev_evolution\": [\n    {\n      \"num\": \"084\",\n      \"name\": \"Doduo\"\n    }\n  ]\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e9ccbe89-4156-463d-99cd-b454a23b5169",
              "parentUUID": "04d05841-bf81-4b37-a5e8-0c558d08f038",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d4b1079-0df4-48bb-932c-d3db2a8b7588",
            "d66e6cd9-9084-408f-9351-fc5878f28b45",
            "7345f4a7-cf4e-4f5b-8b0b-443c2c15289b",
            "14c0d040-fcfe-4c9a-bd58-48ebdf05a942",
            "5878b029-eb9b-4da5-a107-646905af401b",
            "e9ccbe89-4156-463d-99cd-b454a23b5169"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
          "title": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/key-value/spec.js",
          "file": "/logic/find-by/key-value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, name, Weedle",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, name, Weedle",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'name', 'Weedle');\nconst expected = [\n  { \"num\": \"013\", \"name\": \"Weedle\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "81efa2f2-21b4-462c-a956-117cc9499050",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 1, id, 12",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 1, id, 12",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample1, 'id', \"12\");\nconst expected = [\n  { \"num\": \"012\", \"name\": \"Butterfree\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7e73bb33-f0f1-4dd5-89a3-bde7544f220a",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, doesNotExist, hi!",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, doesNotExist, hi!",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'doesNotExist', 'hi!');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "01ada037-c53f-46ab-a7f0-4f00b31cfa86",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name, Mew",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 2, name, Mew",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample2, 'name', 'Mew');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "d87addfb-6e46-401f-b0fc-49e34019cfc9",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, Not in Eggs",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, Not in Eggs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', 'Not in Eggs');\nconst expected = [\n  { \"num\": \"085\", \"name\": \"Dodrio\" },\n  { \"num\": \"087\", \"name\": \"Dewgong\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "1fed8b86-290d-4ec1-9364-59ac4fb65c1b",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, egg, 5 km",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 3, egg, 5 km",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample3, 'egg', '5 km');\nconst expected = [\n  { \"num\": \"083\", \"name\": \"Farfetch'd\" },\n  { \"num\": \"084\", \"name\": \"Doduo\" },\n  { \"num\": \"086\", \"name\": \"Seel\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "b86e881e-9eb7-4450-afe9-103ae087a0cc",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, spawn_time, N/A",
              "fullTitle": "findByKeyValue(pokeData, key, value) : returns the number and name of all pokemon with the given key/value pair data sample 4, spawn_time, N/A",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByKeyValue(dataSample4, 'spawn_time', 'N/A');\nconst expected = [\n  { \"num\": \"132\", \"name\": \"Ditto\" }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "6435929b-4cc3-4fc6-90a8-ef5bf794abbc",
              "parentUUID": "a4dee5ee-4d30-4688-bf2a-aaec2341b281",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81efa2f2-21b4-462c-a956-117cc9499050",
            "7e73bb33-f0f1-4dd5-89a3-bde7544f220a",
            "01ada037-c53f-46ab-a7f0-4f00b31cfa86",
            "d87addfb-6e46-401f-b0fc-49e34019cfc9",
            "1fed8b86-290d-4ec1-9364-59ac4fb65c1b",
            "b86e881e-9eb7-4450-afe9-103ae087a0cc",
            "6435929b-4cc3-4fc6-90a8-ef5bf794abbc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "359749d8-ff22-49f2-a7fc-100a926fce05",
          "title": "findByType(pokeData, type) : returns the name and number of all pokemon with this type",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/type/spec.js",
          "file": "/logic/find-by/type/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 1, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample1, 'Bug');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Metapod', num: '011' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' },\n  { name: 'Kakuna', num: '014' },\n  { name: 'Beedrill', num: '015' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "55f3f228-e214-4510-adb2-143d3416a9f7",
              "parentUUID": "359749d8-ff22-49f2-a7fc-100a926fce05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 2, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample2, 'Bug');\nconst expected = [\n  { name: 'Paras', num: '046' },\n  { name: 'Parasect', num: '047' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3c1ae74f-c989-4397-8047-1c92ed8f1401",
              "parentUUID": "359749d8-ff22-49f2-a7fc-100a926fce05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Water",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 3, Water",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample3, 'Water');\nconst expected = [\n  { name: 'Seel', num: '086' },\n  { name: 'Dewgong', num: '087' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "8a1c502f-7125-46ca-bc12-c6c78e36ff1e",
              "parentUUID": "359749d8-ff22-49f2-a7fc-100a926fce05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample4, 'Normal');\nconst expected = [\n  { name: 'Tauros', num: '128' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "9d9ccd01-145f-4d1c-8013-9560494661ea",
              "parentUUID": "359749d8-ff22-49f2-a7fc-100a926fce05",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByType(pokeData, type) : returns the name and number of all pokemon with this type data sample 5, Dragon",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByType(dataSample5, 'Dragon');\nconst expected = [\n  { name: 'Dratini', num: '147' },\n  { name: 'Dragonair', num: '148' },\n  { name: 'Dragonite', num: '149' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "3163882c-ce00-4a0f-bb35-282a18afe098",
              "parentUUID": "359749d8-ff22-49f2-a7fc-100a926fce05",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55f3f228-e214-4510-adb2-143d3416a9f7",
            "3c1ae74f-c989-4397-8047-1c92ed8f1401",
            "8a1c502f-7125-46ca-bc12-c6c78e36ff1e",
            "9d9ccd01-145f-4d1c-8013-9560494661ea",
            "3163882c-ce00-4a0f-bb35-282a18afe098"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2a7da509-62d7-4e4f-b531-cef7be77d5bf",
          "title": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/value/spec.js",
          "file": "/logic/find-by/value/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, 12",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 1, 12",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample1, '12');\nconst expected = [\n  { name: 'Caterpie', num: '010' },\n  { name: 'Butterfree', num: '012' },\n  { name: 'Weedle', num: '013' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "0dca6e2a-bdf7-48c2-ab33-73f525ea53a2",
              "parentUUID": "2a7da509-62d7-4e4f-b531-cef7be77d5bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 2, Bug",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample2, 'Bug');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "7ec8a6b2-74de-46a4-9409-f59ed4de58d4",
              "parentUUID": "2a7da509-62d7-4e4f-b531-cef7be77d5bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, None",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 4, None",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample4, 'None');\nconst expected = [\n  { name: 'Mr. Mime', num: '122' },\n  { name: 'Scyther', num: '123' },\n  { name: 'Jynx', num: '124' },\n  { name: 'Electabuzz', num: '125' },\n  { name: 'Magmar', num: '126' },\n  { name: 'Pinsir', num: '127' },\n  { name: 'Tauros', num: '128' },\n  { name: 'Lapras', num: '131' },\n  { name: 'Ditto', num: '132' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a9f1e0c8-404e-4ba0-9830-131629c055da",
              "parentUUID": "2a7da509-62d7-4e4f-b531-cef7be77d5bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, null",
              "fullTitle": "findByValue(pokeData, value) : returns the name and number of all pokemon with this value in any key data sample 5, null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByValue(dataSample5, \"null\");\nconst expected = [\n  { name: 'Moltres', num: '146' },\n  { name: 'Dragonite', num: '149' },\n  { name: 'Mewtwo', num: '150' },\n  { name: 'Mew', num: '151' }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "b484c585-25ef-4bd1-9652-3a74049c0390",
              "parentUUID": "2a7da509-62d7-4e4f-b531-cef7be77d5bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0dca6e2a-bdf7-48c2-ab33-73f525ea53a2",
            "7ec8a6b2-74de-46a4-9409-f59ed4de58d4",
            "a9f1e0c8-404e-4ba0-9830-131629c055da",
            "b484c585-25ef-4bd1-9652-3a74049c0390"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
          "title": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/find-by/weakness/spec.js",
          "file": "/logic/find-by/weakness/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 1, Electric",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 1, Electric",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample1, 'Electric');\nconst expected = [\n  {\n    name: 'Squirtle',\n    num: '007'\n  },\n  {\n    name: 'Wartortle',\n    num: '008'\n  },\n  {\n    name: 'Blastoise',\n    num: '009'\n  },\n  {\n    name: 'Butterfree',\n    num: '012'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e6fd62cd-74ee-4b98-ad97-33bb78fc8ad6",
              "parentUUID": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Bug",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 2, Bug",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample2, 'Bug');\nconst expected = [\n  {\n    name: 'Paras',\n    num: '046'\n  },\n  {\n    name: 'Parasect',\n    num: '047'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "bfdb4ae4-2854-411f-b38f-1a8a2df615bd",
              "parentUUID": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, Fighting",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 3, Fighting",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample3, 'Fighting');\nconst expected = [\n  {\n    name: 'Dewgong',\n    num: '087'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "a8ae6f86-3ea8-4635-bbbf-23ed6454f7b6",
              "parentUUID": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 4, Normal",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample4, 'Normal');\nconst expected = null;\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "52d4d6a3-32e0-4304-8ee4-ad57f1abd6b1",
              "parentUUID": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "findByWeakness(pokeData, weakness) : returns the name and number of all pokemon with this weakness data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = findByWeakness(dataSample5, 'Dragon');\nconst expected = [\n  {\n    name: 'Dratini',\n    num: '147'\n  },\n  {\n    name: 'Dragonair',\n    num: '148'\n  },\n  {\n    name: 'Dragonite',\n    num: '149'\n  }\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "4ebdd315-0efa-44ae-b041-2a427ef09277",
              "parentUUID": "8dcb92d3-ef26-403a-a88f-8327e6361eb2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6fd62cd-74ee-4b98-ad97-33bb78fc8ad6",
            "bfdb4ae4-2854-411f-b38f-1a8a2df615bd",
            "a8ae6f86-3ea8-4635-bbbf-23ed6454f7b6",
            "52d4d6a3-32e0-4304-8ee4-ad57f1abd6b1",
            "4ebdd315-0efa-44ae-b041-2a427ef09277"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
          "title": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/type-stats/spec.js",
          "file": "/logic/type-stats/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, Grass",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Grass",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Grass');\nconst expected = {\n  typeCount: 5,\n  typeName: 'Grass',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "cd4320f6-e8f5-403c-84db-f009cf0063d7",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, Fire",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 2, Fire",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample2, 'Fire');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fire',\n  weaknessCount: 5\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "1e16056a-4d6e-4214-b269-919cebca6232",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Normal",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Normal",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Normal');\nconst expected = {\n  typeCount: 2,\n  typeName: 'Normal',\n  weaknessCount: 0\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "434386db-dee4-454d-8ce5-f22d6adeef8e",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, Fighting",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 4, Fighting",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample4, 'Fighting');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fighting',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "e886fb3c-f6ef-4128-b743-3f957c9f31f6",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Dragon",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Dragon",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Dragon');\nconst expected = {\n  typeCount: 3,\n  typeName: 'Dragon',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "23f49d18-ab6d-4a1a-a7ef-0e14b28c49b8",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, Fairy",
              "fullTitle": "typeStats(pokeData, type) : returns how many times a type appears in the pokeData data sample 5, Fairy",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = typeStats(dataSample5, 'Fairy');\nconst expected = {\n  typeCount: 0,\n  typeName: 'Fairy',\n  weaknessCount: 3\n};\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "085550b0-8c43-4130-af79-41eb7810e3e6",
              "parentUUID": "c6c75350-5de8-461d-a16c-37e43ecfa78b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cd4320f6-e8f5-403c-84db-f009cf0063d7",
            "1e16056a-4d6e-4214-b269-919cebca6232",
            "434386db-dee4-454d-8ce5-f22d6adeef8e",
            "e886fb3c-f6ef-4128-b743-3f957c9f31f6",
            "23f49d18-ab6d-4a1a-a7ef-0e14b28c49b8",
            "085550b0-8c43-4130-af79-41eb7810e3e6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "55e24de1-96c6-41a1-baff-d758f268ee03",
          "title": "valuesForKey(pokeData, key) : returns all unique values stored in that key",
          "fullFile": "/home/hackyourfuture/Documents/HYF/web-apps/week4/pokedex-api/logic/values-for-key/spec.js",
          "file": "/logic/values-for-key/spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "data sample 2, id",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, id",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'id');\nconst expected = [43, 44, 45, 46, 47];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "5f0eb145-054e-4b49-80ba-2d59ee30fc29",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 2, name",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 2, name",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample2, 'name');\nconst expected = [\n  'Oddish',\n  'Gloom',\n  'Vileplume',\n  'Paras',\n  'Parasect'\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "447a9237-c09d-4eab-8bdd-5b1ec67184d5",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, num",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, num",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'num');\nconst expected = ['083', '084', '085', '086', '087'];\nassert.deepStrictEqual(actual, expected);",
              "err": {},
              "uuid": "0ad90250-5056-4eae-8341-e1808332e95b",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 3, multipliers",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 3, multipliers",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample3, 'multipliers');\nconst expected = [\n  null,\n  [2.19, 2.24],\n  [1.04, 1.96]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    null,\n...\n      2.24\n    ],\n+   null,\n+   [\n+     1.04,\n+     1.96\n+   ],\n+   null\n-   [\n-     1.04,\n-     1.96\n-   ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    null,\n...\n      2.24\n    ],\n+   null,\n+   [\n+     1.04,\n+     1.96\n+   ],\n+   null\n-   [\n-     1.04,\n-     1.96\n-   ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:43:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "   [\n     2.19\n     2.24\n   ]\n-   [null]\n   [\n     1.04\n     1.96\n   ]\n-   [null]\n ]\n"
              },
              "uuid": "f5ca0fd9-c1c8-4177-8189-66e7b203fbb5",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, weaknesses",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, weaknesses",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'weaknesses');\nconst expected = [\n  ['Bug', 'Ghost', 'Dark'],\n  ['Fire', 'Electric', 'Ice', 'Flying', 'Rock'],\n  ['Fire', 'Bug', 'Rock', 'Ghost', 'Dark', 'Steel'],\n  ['Ground'],\n  ['Water', 'Ground', 'Rock'],\n  ['Fire', 'Flying', 'Rock'],\n  ['Fighting'],\n  ['Electric', 'Grass'],\n  ['Electric', 'Rock'],\n  ['Electric', 'Grass', 'Fighting', 'Rock']\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n    [\n...\n      'Fighting',\n      'Rock'\n+   ],\n+   [\n+     'Fighting'\n    ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:60:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": "     \"Grass\"\n     \"Fighting\"\n     \"Rock\"\n   ]\n-   [\n-     \"Fighting\"\n-   ]\n ]\n"
              },
              "uuid": "c402fe7e-58f2-4d3f-834c-8eeb9fcdfdb6",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 4, prev_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 4, prev_evolution",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample4, 'prev_evolution');\nconst expected = [\n  [\n    { num: '129', name: 'Magikarp' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   undefined,\n    [\n...\n      }\n    ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   undefined,\n    [\n...\n      }\n    ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:70:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": " [\n-   [undefined]\n   [\n     {\n       \"name\": \"Magikarp\"\n       \"num\": \"129\"\n"
              },
              "uuid": "c2d0304b-6d4f-469a-9563-105891f3a29e",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "data sample 5, next_evolution",
              "fullTitle": "valuesForKey(pokeData, key) : returns all unique values stored in that key data sample 5, next_evolution",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const actual = valuesForKey(dataSample5, 'next_evolution');\nconst expected = [\n  [\n    { num: '148', name: 'Dragonair' },\n    { num: '149', name: 'Dragonite' }\n  ],\n  [\n    { num: '149', name: 'Dragonite' }\n  ]\n];\nassert.deepStrictEqual(actual, expected);",
              "err": {
                "message": "AssertionError: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   undefined,\n    [\n...\n      }\n    ]\n  ]",
                "estack": "AssertionError [ERR_ASSERTION]: Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   undefined,\n    [\n...\n      }\n    ]\n  ]\n    at Context.<anonymous> (logic/values-for-key/spec.js:84:12)\n    at processImmediate (internal/timers.js:456:21)",
                "diff": " [\n-   [undefined]\n   [\n     {\n       \"name\": \"Dragonair\"\n       \"num\": \"148\"\n"
              },
              "uuid": "d54725f3-e789-49be-848a-3a1ae42f9a07",
              "parentUUID": "55e24de1-96c6-41a1-baff-d758f268ee03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f0eb145-054e-4b49-80ba-2d59ee30fc29",
            "447a9237-c09d-4eab-8bdd-5b1ec67184d5",
            "0ad90250-5056-4eae-8341-e1808332e95b"
          ],
          "failures": [
            "f5ca0fd9-c1c8-4177-8189-66e7b203fbb5",
            "c402fe7e-58f2-4d3f-834c-8eeb9fcdfdb6",
            "c2d0304b-6d4f-469a-9563-105891f3a29e",
            "d54725f3-e789-49be-848a-3a1ae42f9a07"
          ],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}